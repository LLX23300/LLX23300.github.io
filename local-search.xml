<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>kxllx的灾难</title>
    <link href="/2024/10/23/2024.10.23-1/"/>
    <url>/2024/10/23/2024.10.23-1/</url>
    
    <content type="html"><![CDATA[<hr><hr><p>​由于出了一个月的差，忘记续费在vmiss上购买的主服务器，导致所有的网站，包括博客、图传、通讯站等全部丢失。。。</p><p>​起初十分的崩溃，后来想想，大不了重新建一遍算了</p><p>​还好blog文件留有备份，chev图床文件在原小鸡上还有部分留存，唉，下次记得续费。。。。。</p>]]></content>
    
    
    <categories>
      
      <category>凝滞时间</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>建立kener探针站</title>
    <link href="/2024/09/11/2024.9.11-1/"/>
    <url>/2024/09/11/2024.9.11-1/</url>
    
    <content type="html"><![CDATA[<p>建立kener探针站，因为真的闲得无聊</p><hr><h4 id="kener探针"><a href="#kener探针" class="headerlink" title="kener探针"></a>kener探针</h4><p>Kener 探针是一款网络监控和性能监测工具，它主要用于实时监控各种网络服务的可用性、性能和运行状态。通过部署 Kener 探针，可以帮助你监控网站、API 接口或其他网络服务的状态，以确保它们能够正常运行，并在服务中断或性能下降时及时报警。</p><hr><h4 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h4><p>我通过docker 来部署，轻松简便一点</p><p>拉取镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull rajnandan1/kener<br></code></pre></td></tr></table></figure><p>部署,注意宿主机部署的路径下需要有一个config文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -d -v /root/kener/config:/config -p 127.0.0.1:3000:3000 -e <span class="hljs-string">&quot;GH_TOKEN=1234&quot;</span> rajnandan1/kener<br></code></pre></td></tr></table></figure><hr><h4 id="nginx与证书配置"><a href="#nginx与证书配置" class="headerlink" title="nginx与证书配置"></a>nginx与证书配置</h4><p>首先cloudflare上创建一个域名</p><p>使用certbot给域名创建ssl证书</p><p><a href="https://blog.kxllx.shop/2024/07/24/2024.7.24-1/">使用snap安装的certbot管理 SSL 证书 - Hexo (kxllx.shop)</a></p><p>注意，certbot会自动添加nginx上kener的配置信息，但是并没有做反向代理，且配置的有点问题，还是要自行配置 &#x2F;etc&#x2F;nginx&#x2F;nginx.conf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs bash">server &#123;<br>    server_name <span class="hljs-comment">#yourkener&#x27;s domain;</span><br><br>    <span class="hljs-comment"># SSL 配置</span><br>    listen [::]:443 ssl ipv6only=on;<br>    listen 443 ssl;<br>    ssl_certificate /etc/letsencrypt/live/kener.kxllx.shop/fullchain.pem;<br>    ssl_certificate_key /etc/letsencrypt/live/kener.kxllx.shop/privkey.pem;<br>    include /etc/letsencrypt/options-ssl-nginx.conf;<br>    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;<br><br>    location / &#123;<br>        <span class="hljs-comment"># 将流量转发到本地运行的 Kener 容器</span><br>        proxy_pass http://127.0.0.1:3000;<br>        proxy_set_header Host <span class="hljs-variable">$host</span>;<br>        proxy_set_header X-Real-IP <span class="hljs-variable">$remote_addr</span>;<br>        proxy_set_header X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br>        proxy_set_header X-Forwarded-Proto <span class="hljs-variable">$scheme</span>;<br>    &#125;<br><br>    <span class="hljs-comment"># 处理 404 页面，防止非法路径请求</span><br>    error_page 404 /404.html;<br>    location = /404.html &#123;<br>        internal;<br>    &#125;<br>&#125;<br><br>server &#123;<br>    <span class="hljs-comment"># 重定向 HTTP 到 HTTPS</span><br>    listen 80;<br>    listen [::]:80;<br>    server_name <span class="hljs-comment">#yourkener&#x27;s domain;</span><br>    <span class="hljs-built_in">return</span> 301 https://$host<span class="hljs-variable">$request_uri</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>添加完重新加载nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl reload nginx<br></code></pre></td></tr></table></figure><hr><h4 id="配置探针与网站设置"><a href="#配置探针与网站设置" class="headerlink" title="配置探针与网站设置"></a>配置探针与网站设置</h4><p>在kener的配置文件夹config中，修改monitors.yaml与site.yaml这两个文件</p><p>monitors.yaml添加监控网站例子</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-bullet">-</span> <span class="hljs-string">name: kxllx&#x27;s blog</span><br>  <span class="hljs-attribute">description</span><span class="hljs-punctuation">:</span> <span class="hljs-string">blog</span><br>  <span class="hljs-attribute">tag</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;blog&quot;</span><br>  <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/google.png&quot;</span><br>  <span class="hljs-attribute">api</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">method</span><span class="hljs-punctuation">:</span> <span class="hljs-string">GET</span><br>      <span class="hljs-attribute">url</span><span class="hljs-punctuation">:</span> <span class="hljs-string">https://blog.kxllx.shop</span><br></code></pre></td></tr></table></figure><hr><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p><a href="https://github.com/rajnandan1/kener">rajnandan1&#x2F;kener： Kener 是一个现代自托管的状态页面，包括电池 (github.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>学海无涯</category>
      
    </categories>
    
    
    <tags>
      
      <tag>建站</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于docker中容器能否ip+端口直接访问的问题</title>
    <link href="/2024/09/04/2024.9.4-1/"/>
    <url>/2024/09/04/2024.9.4-1/</url>
    
    <content type="html"><![CDATA[<p>之前建站一直想杜绝外部以ip+端口的方式访问网站，试过cloudflare配置waf规则，nginx配置反代规则等，一直不行，今天看到应该是docker容器端口映射的原因</p><hr><h4 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h4><h5 id="1-chev-app-1-容器"><a href="#1-chev-app-1-容器" class="headerlink" title="1.chev-app-1 容器"></a>1.<code>chev-app-1</code> 容器</h5><ul><li><strong>镜像</strong>: <code>nmtan/chevereto:1.4.1</code></li><li><strong>端口映射</strong>: <code>127.0.0.1:7777-&gt;80/tcp</code></li></ul><p>这个映射表示 <code>chev-app-1</code> 容器的内部端口 <code>80</code> 映射到了主机的 <code>127.0.0.1:7777</code>。由于它使用的是 <code>127.0.0.1</code>（本地主机），只有主机自己可以通过 <code>localhost</code> 或者 <code>127.0.0.1</code> 访问这个服务。换句话说，只有在本机上运行的程序或者用户才能访问 <code>http://127.0.0.1:7777</code>。其他外部网络的 IP 地址（包括局域网中的其他设备）无法直接访问 <code>chev-app-1</code> 服务。</p><h5 id="2-chev-db-1-容器"><a href="#2-chev-db-1-容器" class="headerlink" title="2. chev-db-1 容器"></a>2. <code>chev-db-1</code> 容器</h5><ul><li><strong>镜像</strong>: <code>mariadb</code></li><li><strong>端口映射</strong>: <code>3306/tcp</code></li></ul><p><code>chev-db-1</code> 容器的端口 <code>3306</code> 并没有映射到主机的任何端口。这意味着该容器的服务只能在 Docker 内部网络中被访问，无法通过主机的 IP 地址直接从外部网络访问。</p><h5 id="3-synctv-容器"><a href="#3-synctv-容器" class="headerlink" title="3. synctv 容器"></a>3. <code>synctv</code> 容器</h5><ul><li><strong>镜像</strong>: <code>synctvorg/synctv</code></li><li><strong>端口映射</strong>: <code>0.0.0.0:8086-&gt;8080/tcp</code></li></ul><p><code>synctv</code> 容器的内部端口 <code>8080</code> 映射到了主机的 <code>8086</code> 端口，并使用 <code>0.0.0.0</code> 作为 IP 地址。这意味着主机上的所有网络接口（包括本地主机、局域网 IP 和外部 IP）都可以访问这个服务。任何设备只要知道主机的 IP 地址和端口 <code>8086</code>，都可以访问这个服务，例如 <code>http://your-host-ip:8086</code>。</p><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><strong><code>127.0.0.1</code> (本地主机) 访问</strong>：仅限本机访问，外部设备无法访问。例如，<code>chev-app-1</code> 只能通过本地主机访问。</li><li><strong><code>0.0.0.0</code> (所有网络接口) 访问</strong>：可以被外部网络访问。例如，<code>synctv</code> 可以通过主机的 IP 地址和相应端口从外部访问。</li></ul>]]></content>
    
    
    <categories>
      
      <category>学海无涯</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>chevereto站的迁移</title>
    <link href="/2024/09/03/2024.9.3-1/"/>
    <url>/2024/09/03/2024.9.3-1/</url>
    
    <content type="html"><![CDATA[<p>一直想把美国小鸡上的chevereto站移到大阪的小鸡上，问就是传到美国的速度慢的令人发指</p><hr><h4 id="linux文件夹的打包"><a href="#linux文件夹的打包" class="headerlink" title="linux文件夹的打包"></a>linux文件夹的打包</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar -cvf chevereto.tar chevereto/<br></code></pre></td></tr></table></figure><p>其中，-c表示创建新的归档文件，-z表示使用gzip压缩，-v表示显示详细信息，-f表示指定归档文件名。test表示要打包的目录</p><p>我在这里打包了chevereto整个配置文件夹</p><hr><h4 id="服务启动"><a href="#服务启动" class="headerlink" title="服务启动"></a>服务启动</h4><p>将chevereto.tar解压到目标机&#x2F;home&#x2F;web路径下</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">tar</span> -xvf chevereto.tar<br></code></pre></td></tr></table></figure><p>先拉取mariadb与chevereto:1.4.1的包（注意，支持中文的chevereto:1.4.1不能在docker自动拉取，需要手动下载导入，感谢大佬的包下载地址<a href="https://alist.xiayexiaolu.top/d/softwares/docker/chevereto/chevereto.tar%EF%BC%89">https://alist.xiayexiaolu.top/d/softwares/docker/chevereto/chevereto.tar）</a></p><p>原本是用docker-compose部署的，现在依旧启动dokcer-compose进行部署就可以了，不会影响docker现有服务</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker-compose up -d</span><br></code></pre></td></tr></table></figure><p>docker-compose.yml配置如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">db:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">mariadb</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./db:/var/lib/mysql:rw</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">default</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">MYSQL_ROOT_PASSWORD:</span> <span class="hljs-comment">#yourpasswd</span><br>      <span class="hljs-attr">MYSQL_DATABASE:</span> <span class="hljs-string">chevereto</span><br>      <span class="hljs-attr">MYSQL_USER:</span> <span class="hljs-comment">#youruser</span><br>      <span class="hljs-attr">MYSQL_PASSWORD:</span> <span class="hljs-comment">#yourpasswd</span><br><br>  <span class="hljs-attr">app:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">nmtan/chevereto:1.4.1</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;127.0.0.1:7777:80&quot;</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">default</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">CHEVERETO_DB_HOST:</span> <span class="hljs-string">db</span><br>      <span class="hljs-attr">CHEVERETO_DB_NAME:</span> <span class="hljs-string">chevereto</span><br>      <span class="hljs-attr">CHEVERETO_DB_USERNAME:</span> <span class="hljs-comment">#youruser # 与db的设置一一对应</span><br>      <span class="hljs-attr">CHEVERETO_DB_PASSWORD:</span> <span class="hljs-comment">#yourpasswd # 与db的设置一一对应</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./app/images:/var/www/html/images:rw</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./app/php.ini:/usr/local/etc/php/php.ini:ro</span><br>    <span class="hljs-attr">depends_on:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">db</span><br></code></pre></td></tr></table></figure><hr><h4 id="配置反代"><a href="#配置反代" class="headerlink" title="配置反代"></a>配置反代</h4><p>在nginx.config中加上chevereto的部分</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>      <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span> default_server;<br>      <span class="hljs-attribute">listen</span> [::]:<span class="hljs-number">80</span> default_server;<br>      <span class="hljs-attribute">server_name</span> _;<br>      <span class="hljs-attribute">return</span> <span class="hljs-number">403</span>;<br>    &#125;<br><br><span class="hljs-section">server</span> &#123;<br><span class="hljs-attribute">listen</span> <span class="hljs-number">443</span> ssl;<br><span class="hljs-attribute">server_name</span> <span class="hljs-comment">#youdomain;</span><br><br>    ssl_certificate /etc/letsencrypt/live/<span class="hljs-comment">#youdomain /fullchain.pem; </span><br>    <span class="hljs-comment"># managed by Certbot</span><br>    ssl_certificate_key /etc/letsencrypt/live/<span class="hljs-comment">#youdomain /privkey.pem; </span><br>    <span class="hljs-comment"># managed by Certbot</span><br>    include /etc/letsencrypt/options-ssl-nginx.conf;<br>    <span class="hljs-attribute">ssl_dhparam</span> /etc/letsencrypt/ssl-dhparams.pem;<br><br><span class="hljs-attribute">ssl_ciphers</span> <span class="hljs-comment">###;</span><br><br>location / &#123;<br><span class="hljs-attribute">proxy_pass</span> http://127.0.0.1:7777/;<br><span class="hljs-attribute">proxy_set_header</span> Host <span class="hljs-variable">$host</span>;<br><span class="hljs-attribute">proxy_set_header</span> X-Real-IP <span class="hljs-variable">$remote_addr</span>;<br><span class="hljs-attribute">proxy_set_header</span> X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br><span class="hljs-attribute">proxy_set_header</span> X-Forwarded-Proto <span class="hljs-variable">$scheme</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h4 id="配置证书"><a href="#配置证书" class="headerlink" title="配置证书"></a>配置证书</h4><p>直接把源服务器中的证书文件拷贝过来出现了问题，还是用certbot方便证书的统一管理</p><p>新建好证书后证书文件统一在&#x2F;etc&#x2F;letsencrypt&#x2F;live&#x2F;路径下，并在nginx.config中配置</p><p>使用certbot命令查看证书状态，查看是否可以正常自动续期</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada">certbot certificates<br>sudo certbot renew <span class="hljs-comment">--dry-run</span><br></code></pre></td></tr></table></figure><p>访问域名可正常访问</p><hr><h4 id="修改上传文件大小"><a href="#修改上传文件大小" class="headerlink" title="修改上传文件大小"></a>修改上传文件大小</h4><p>修改php.ini文件</p><hr><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p><a href="https://blog.csdn.net/Alaiks/article/details/138001751">搭建个人图床_chevereto-CSDN博客</a></p><p><a href="https://www.ioiox.com/archives/80.html">docker compose 部署迁移 Chevereto 图床程序教程 - 思有云 - IOIOX</a></p><p><a href="https://blog.csdn.net/qq_19564393/article/details/108506062">修改Chevereto的API上传相册和用户_chevereto api-CSDN博客</a></p><p><a href="https://segmentfault.com/q/1010000038224029">php - Chevereto 的 PHP 7.2 配置修改最大上传容量后为何仍无法上传大于 10MB 的图片？ - SegmentFault 思否</a></p>]]></content>
    
    
    <categories>
      
      <category>学海无涯</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用iptables配置防火墙</title>
    <link href="/2024/07/26/2024.7.26-1/"/>
    <url>/2024/07/26/2024.7.26-1/</url>
    
    <content type="html"><![CDATA[<h4 id="iptables"><a href="#iptables" class="headerlink" title="iptables"></a>iptables</h4><p><strong>功能</strong>: <code>iptables</code> 是一个强大而复杂的工具，用于配置和管理 Linux 内核的网络包过滤系统。它允许用户设置详细的网络过滤规则，控制网络流量的行为。</p><p><strong>配置</strong>: 通过直接编辑规则链来配置。规则链包括 <code>INPUT</code>, <code>FORWARD</code>, <code>OUTPUT</code> 等，用户可以添加、删除和修改规则。配置文件不易读写，通常需要使用命令行工具进行操作。</p><p><strong>灵活性</strong>: 提供了高度的灵活性和控制，可以实现非常细致的网络流量管理，包括对特定源、目的、协议、端口等的控制。</p><p><strong>使用场景</strong>: 通常用于高级用户或管理员，他们需要控制复杂的网络配置或调试防火墙设置。</p><p><strong>命令示例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">iptables -A INPUT -p tcp --dport 80 -j ACCEPT<br>iptables -A INPUT -p tcp --dport 22 -j DROP<br></code></pre></td></tr></table></figure><hr><h4 id="ufw-Uncomplicated-Firewall"><a href="#ufw-Uncomplicated-Firewall" class="headerlink" title="ufw(Uncomplicated Firewall)"></a>ufw(Uncomplicated Firewall)</h4><p><strong>功能</strong>: <code>ufw</code> 是 <code>iptables</code> 的一个前端工具，旨在简化防火墙配置。它为用户提供了一个更简单的命令行接口来管理防火墙规则，适合那些需要基本防火墙功能而不希望深入到 <code>iptables</code> 复杂配置中的用户。</p><p><strong>配置</strong>: 通过简单的命令行工具来配置，提供了易于理解的语法。适合初学者和普通用户。</p><p><strong>灵活性</strong>: 相比 <code>iptables</code>，<code>ufw</code> 提供的功能较为基础，但对于常见的防火墙需求已经足够。它基于 <code>iptables</code> 工作，但隐藏了大部分复杂性。</p><p><strong>使用场景</strong>: 适合普通用户或系统管理员，他们需要快速、简单地配置防火墙规则。</p><p><strong>命令示例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ufw allow 80/tcp<br>ufw deny 22/tcp<br></code></pre></td></tr></table></figure><hr><h4 id="iptables查看当前规则"><a href="#iptables查看当前规则" class="headerlink" title="iptables查看当前规则"></a>iptables查看当前规则</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> iptables -L -v -n<br></code></pre></td></tr></table></figure><hr><h4 id="添加访问规则"><a href="#添加访问规则" class="headerlink" title="添加访问规则"></a>添加访问规则</h4><p><strong>允许ssh访问</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> iptables -A INPUT -p tcp --dport 22 -j ACCEPT<br></code></pre></td></tr></table></figure><p><code>-A INPUT</code>：在 INPUT 链上添加规则。</p><p><code>-p tcp</code>：协议为 TCP。</p><p><code>--dport 22</code>：目标端口为 22（SSH）。</p><p><code>-j ACCEPT</code>：接受匹配的数据包。</p><p><strong>拒绝某个ip的访问</strong></p><p><code>-s 192.168.1.100</code>：来源 IP 地址为 192.168.1.100。</p><p><code>-j DROP</code>：丢弃匹配的数据包。</p><hr><h4 id="删除规则"><a href="#删除规则" class="headerlink" title="删除规则"></a>删除规则</h4><p>要删除规则，可以使用规则的编号。首先列出规则及其编号：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> iptables -L --line-numbers<br></code></pre></td></tr></table></figure><p>然后删除规则，例如删除 INPUT 链上的第 2 条规则：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> iptables -D INPUT 2<br></code></pre></td></tr></table></figure><hr><h4 id="常见操作"><a href="#常见操作" class="headerlink" title="常见操作"></a>常见操作</h4><h4 id="清空所有规则"><a href="#清空所有规则" class="headerlink" title="清空所有规则"></a>清空所有规则</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> iptables -F<br></code></pre></td></tr></table></figure><h4 id="设置默认策略"><a href="#设置默认策略" class="headerlink" title="设置默认策略"></a>设置默认策略</h4><p>设置默认策略为拒绝所有流量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> iptables -P INPUT DROP<br><span class="hljs-built_in">sudo</span> iptables -P FORWARD DROP<br><span class="hljs-built_in">sudo</span> iptables -P OUTPUT ACCEPT<br></code></pre></td></tr></table></figure><h4 id="允许所有来自本机的流量"><a href="#允许所有来自本机的流量" class="headerlink" title="允许所有来自本机的流量"></a>允许所有来自本机的流量</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> iptables -A INPUT -i lo -j ACCEPT<br></code></pre></td></tr></table></figure><ul><li><code>-i lo</code>：指定接口为 loopback。</li></ul><hr><h4 id="检查端口开放情况"><a href="#检查端口开放情况" class="headerlink" title="检查端口开放情况"></a>检查端口开放情况</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">nmap</span> -sS -sU -p- <span class="hljs-number">127.0.0.1</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学海无涯</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用snap安装的certbot管理 SSL 证书</title>
    <link href="/2024/07/24/2024.7.24-1/"/>
    <url>/2024/07/24/2024.7.24-1/</url>
    
    <content type="html"><![CDATA[<h4 id="安装cerbot和Certbot-Nginx-插件"><a href="#安装cerbot和Certbot-Nginx-插件" class="headerlink" title="安装cerbot和Certbot Nginx 插件"></a>安装cerbot和Certbot Nginx 插件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt update<br><span class="hljs-built_in">sudo</span> apt install certbot<br></code></pre></td></tr></table></figure><p>安装nginx插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt install python3-certbot-nginx<br></code></pre></td></tr></table></figure><h4 id="生成证书"><a href="#生成证书" class="headerlink" title="生成证书"></a>生成证书</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> certbot --nginx -d <span class="hljs-comment">#yourdomain</span><br></code></pre></td></tr></table></figure><h4 id="更新Nginx配置"><a href="#更新Nginx配置" class="headerlink" title="更新Nginx配置"></a>更新Nginx配置</h4><p>添加ssl部分</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">ssl_certificate <span class="hljs-regexp">/etc/</span>letsencrypt<span class="hljs-regexp">/live/</span><span class="hljs-comment">#yourdomain/fullchain.pem;</span><br>ssl_certificate_key<span class="hljs-regexp">/etc/</span>letsencrypt<span class="hljs-regexp">/live/</span><span class="hljs-comment">#yourdomain/privkey.pem;</span><br>include <span class="hljs-regexp">/etc/</span>letsencrypt/options-ssl-nginx.conf;<br>ssl_dhparam <span class="hljs-regexp">/etc/</span>letsencrypt/ssl-dhparams.pem;<br></code></pre></td></tr></table></figure><p>在完成配置后，测试 Nginx 配置是否正确：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> nginx -t<br></code></pre></td></tr></table></figure><p>如果配置没有问题，重新加载 Nginx：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl reload nginx<br></code></pre></td></tr></table></figure><h4 id="自动续期"><a href="#自动续期" class="headerlink" title="自动续期"></a>自动续期</h4><p><code>certbot</code> 会自动配置一个系统定时任务来处理证书续期。你可以通过运行以下命令来手动测试自动续期功能：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">sudo certbot renew <span class="hljs-comment">--dry-run</span><br></code></pre></td></tr></table></figure><h4 id="查看证书状态"><a href="#查看证书状态" class="headerlink" title="查看证书状态"></a>查看证书状态</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">certbot certificates</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学海无涯</category>
      
    </categories>
    
    
    <tags>
      
      <tag>建站</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>创建SyncTV站</title>
    <link href="/2024/07/24/2024.7.24-2/"/>
    <url>/2024/07/24/2024.7.24-2/</url>
    
    <content type="html"><![CDATA[<p>SyncTV 是一个允许您远程一起观看电影和直播的程序。它提供了同步观看、剧院和代理功能。对这个站比较感兴趣，搭一下玩玩</p><h4 id="SyncTV-github"><a href="#SyncTV-github" class="headerlink" title="SyncTV github"></a>SyncTV github</h4><p><a href="https://github.com/synctv-org/synctv/blob/main/README-CN.md">synctv&#x2F;README-CN.md at main · synctv-org&#x2F;synctv (github.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>学海无涯</category>
      
    </categories>
    
    
    <tags>
      
      <tag>建站</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ubuntu查看进程</title>
    <link href="/2024/07/15/2024.7.15-1/"/>
    <url>/2024/07/15/2024.7.15-1/</url>
    
    <content type="html"><![CDATA[<p>一直记不住在linux中怎么查看进程，记录一下</p><h3 id="使用-ps命令"><a href="#使用-ps命令" class="headerlink" title="使用 ps命令"></a>使用 <code>ps</code>命令</h3><p><code>ps</code> 命令可以列出当前系统上所有运行的进程。例如：</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos">ps <span class="hljs-built_in">aux</span><br></code></pre></td></tr></table></figure><p>这个命令会显示所有用户的所有进程，列出进程的详细信息，包括用户、PID、CPU和内存使用情况等。</p><h3 id="使用-top-命令"><a href="#使用-top-命令" class="headerlink" title="使用 top 命令"></a>使用 <code>top</code> 命令</h3><p><code>top</code> 命令可以实时监控系统上的进程情况，并显示系统资源的使用情况。启动 <code>top</code> 命令：</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq"><span class="hljs-built_in">top</span><br></code></pre></td></tr></table></figure><p>你可以看到一个动态更新的进程列表，按 <code>q</code> 键可以退出。</p><h3 id="使用-htop-命令"><a href="#使用-htop-命令" class="headerlink" title="使用 htop 命令"></a>使用 <code>htop</code> 命令</h3><p><code>htop</code> 是 <code>top</code> 命令的一个改进版本，提供了更友好的用户界面。安装并运行 <code>htop</code>：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">apt-<span class="hljs-built_in">get</span> install htop<br>htop<br></code></pre></td></tr></table></figure><p>和 <code>top</code> 类似，<code>htop</code> 显示系统上的进程，并允许你通过键盘快捷键进行操作。</p><h3 id="使用-systemctl-命令"><a href="#使用-systemctl-命令" class="headerlink" title="使用 systemctl 命令"></a>使用 <code>systemctl</code> 命令</h3><p><code>systemctl</code> 命令可以列出系统中所有的服务及其状态：</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">systemctl</span> <span class="hljs-built_in">list-units</span> <span class="hljs-built_in">--type=service</span><br></code></pre></td></tr></table></figure><p>这个命令会显示所有系统服务，包括正在运行和未运行的服务。</p><p>总结：用htop还是方便点</p>]]></content>
    
    
    <categories>
      
      <category>学海无涯</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vocechat搭建</title>
    <link href="/2024/07/04/2024.7.4-1/"/>
    <url>/2024/07/04/2024.7.4-1/</url>
    
    <content type="html"><![CDATA[<p>从病友那边了解到vocechat是一款极简、极轻、无痕、匿名的聊天工具，尝试搭建</p><p>官网：<a href="https://doc.voce.chat/zh-cn/install/install-by-docker#docker--nginx">Docker 安装 | VoceChat</a></p><h4 id="使用docker-nginx方式部署："><a href="#使用docker-nginx方式部署：" class="headerlink" title="使用docker+nginx方式部署："></a>使用docker+nginx方式部署：</h4><h5 id="1-docker部署vocechat"><a href="#1-docker部署vocechat" class="headerlink" title="1.docker部署vocechat"></a>1.docker部署vocechat</h5><p>拉取镜像</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">docker pull privoce/vocechat-<span class="hljs-keyword">server</span><br></code></pre></td></tr></table></figure><p>运行vocechat</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ruby">docker run -d --restart=always \<br>  -p <span class="hljs-number">3009</span><span class="hljs-symbol">:</span><span class="hljs-number">3000</span> \<br>  --name vocechat-server \<br>  -v ~<span class="hljs-regexp">/.vocechat-server/data</span><span class="hljs-symbol">:/home/vocechat-server/data</span> \<br>  privoce/vocechat-<span class="hljs-symbol">server:</span>latest \<br>  --network.frontend_url <span class="hljs-string">&quot;https://vocechat.yourdomain.com&quot;</span><br></code></pre></td></tr></table></figure><h5 id="2-配置ssl"><a href="#2-配置ssl" class="headerlink" title="2.配置ssl"></a>2.配置ssl</h5><p>在cloudflare上新建一个域名</p><p>安装snap包管理工具：</p><p>Snap 是一个软件打包和部署系统，它允许开发者将应用程序及其依赖项打包为一个单独的安全沙盒化的软件包。这些软件包可以在各种 Linux 发行版上运行，而不受特定发行版的软件包管理系统的限制。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt update<br><span class="hljs-built_in">sudo</span> apt install snapd<br></code></pre></td></tr></table></figure><p>测试安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">sudo</span> snap install hello-world</span><br>hello-world 6.4 from Canonical✓ installed<br><span class="hljs-meta prompt_">$ </span><span class="language-bash">hello-world</span><br>Hello World!<br></code></pre></td></tr></table></figure><p>安装Certbot：</p><p>Certbot用于自动化管理 HTTPS 证书的获取、安装、更新和撤销过程。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> snap install --classic certbot<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">ln</span> -s /snap/bin/certbot /usr/bin/certbot<br></code></pre></td></tr></table></figure><p>使用 Certbot 和 Nginx 插件来获取 SSL 证书，执行后会要求输入邮箱，选择可注册证书的域名</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">sudo certbot <span class="hljs-comment">--nginx</span><br></code></pre></td></tr></table></figure><p>配置nginx</p><p>&#x2F;etc&#x2F;nginx&#x2F;nginx.conf</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">user</span> nginx;<br><span class="hljs-attribute">worker_processes</span> auto;<br><br><span class="hljs-attribute">error_log</span> /var/log/nginx/<span class="hljs-literal">error</span>.log <span class="hljs-literal">notice</span>;<br><span class="hljs-attribute">pid</span> /var/run/nginx.pid;<br><br><span class="hljs-section">events</span> &#123;<br>    <span class="hljs-attribute">worker_connections</span> <span class="hljs-number">1024</span>;<br>&#125;<br><br><span class="hljs-section">http</span> &#123;<br>    <span class="hljs-attribute">include</span> /etc/nginx/mime.types;<br>    <span class="hljs-attribute">default_type</span> application/octet-stream;<br><br>    <span class="hljs-attribute">log_format</span> main <span class="hljs-string">&#x27;<span class="hljs-variable">$remote_addr</span> - <span class="hljs-variable">$remote_user</span> [<span class="hljs-variable">$time_local</span>] &quot;<span class="hljs-variable">$request</span>&quot; &#x27;</span><br>                      <span class="hljs-string">&#x27;<span class="hljs-variable">$status</span> <span class="hljs-variable">$body_bytes_sent</span> &quot;<span class="hljs-variable">$http_referer</span>&quot; &#x27;</span><br>                      <span class="hljs-string">&#x27;&quot;<span class="hljs-variable">$http_user_agent</span>&quot; &quot;<span class="hljs-variable">$http_x_forwarded_for</span>&quot;&#x27;</span>;<br><br>    <span class="hljs-attribute">access_log</span> /var/log/nginx/access.log main;<br><br>    <span class="hljs-attribute">sendfile</span> <span class="hljs-literal">on</span>;<br>    <span class="hljs-attribute">keepalive_timeout</span> <span class="hljs-number">65</span>;<br><br>    <span class="hljs-attribute">include</span> /etc/nginx/conf.d/<span class="hljs-regexp">*.conf</span>;<br><br>    <span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">server_name</span> vocechat.yourdomain.shop;<br><br>        <span class="hljs-attribute">listen</span> <span class="hljs-number">443</span> ssl;<br>        <span class="hljs-attribute">ssl_certificate</span> /etc/letsencrypt/live/vocechat.yourdomain.shop/fullchain.pem;<br>        <span class="hljs-attribute">ssl_certificate_key</span> /etc/letsencrypt/live/vocechat.yourdomain.shop/privkey.pem;<br>        <span class="hljs-attribute">include</span> /etc/letsencrypt/options-ssl-nginx.conf;<br>        <span class="hljs-attribute">ssl_dhparam</span> /etc/letsencrypt/ssl-dhparams.pem;<br><br>        <span class="hljs-section">location</span> / &#123;<br>            <span class="hljs-attribute">proxy_pass</span> http://127.0.0.1:3009;<br>            <span class="hljs-attribute">proxy_redirect</span> <span class="hljs-literal">off</span>;<br>            <span class="hljs-attribute">proxy_set_header</span> Host <span class="hljs-variable">$host</span>;<br>            <span class="hljs-attribute">proxy_set_header</span> X-Real-IP <span class="hljs-variable">$remote_addr</span>;<br>            <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br>            <span class="hljs-attribute">proxy_next_upstream</span> <span class="hljs-literal">error</span> timeout invalid_header http_500 http_502 http_503 http_504;<br>            <span class="hljs-attribute">proxy_max_temp_file_size</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-attribute">proxy_http_version</span> <span class="hljs-number">1</span>.<span class="hljs-number">1</span>;<br>            <span class="hljs-attribute">proxy_set_header</span> Connection <span class="hljs-string">&#x27;&#x27;</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">if</span> (<span class="hljs-variable">$host</span> = vocechat.yourdomain.shop) &#123;<br>            <span class="hljs-attribute">return</span> <span class="hljs-number">301</span> https://<span class="hljs-variable">$host</span><span class="hljs-variable">$request_uri</span>;<br>        &#125; <span class="hljs-comment"># managed by Certbot</span><br>        <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<br>        <span class="hljs-attribute">server_name</span> vocechat.yourdomain.shop;<br>        <span class="hljs-attribute">return</span> <span class="hljs-number">404</span>; <span class="hljs-comment"># managed by Certbot</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>重启ngnix</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> nginx -t<br><span class="hljs-built_in">sudo</span> systemctl reload nginx<br></code></pre></td></tr></table></figure><p>就可以访问了</p>]]></content>
    
    
    <categories>
      
      <category>学海无涯</category>
      
    </categories>
    
    
    <tags>
      
      <tag>建站</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git的基础使用</title>
    <link href="/2024/07/02/2024.7.2-1/"/>
    <url>/2024/07/02/2024.7.2-1/</url>
    
    <content type="html"><![CDATA[<h4 id="1-配置Git"><a href="#1-配置Git" class="headerlink" title="1.配置Git"></a>1.配置Git</h4><p>设置用户名和邮箱</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.name</span> <span class="hljs-string">&quot;Your Name&quot;</span><br>git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.email</span> <span class="hljs-string">&quot;youremail@example.com&quot;</span><br></code></pre></td></tr></table></figure><h4 id="2-创建和克隆仓库"><a href="#2-创建和克隆仓库" class="headerlink" title="2.创建和克隆仓库"></a>2.创建和克隆仓库</h4><p>创建一个新的本地 Git 仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> myproject<br><span class="hljs-built_in">cd</span> myproject<br>git init<br></code></pre></td></tr></table></figure><p>从远程仓库克隆一个本地副本。</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">https</span>://github.com/user/repo.git<br></code></pre></td></tr></table></figure><h4 id="3-基本操作"><a href="#3-基本操作" class="headerlink" title="3.基本操作"></a>3.基本操作</h4><p>查看仓库状态</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git status</span><br></code></pre></td></tr></table></figure><p>将更改的文件添加到暂存区</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">git <span class="hljs-built_in">add</span> filename<br></code></pre></td></tr></table></figure><p>添加所有更改的文件</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">git <span class="hljs-built_in">add</span> .<br></code></pre></td></tr></table></figure><p>将暂存区的文件提交到本地仓库</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">git</span> commit -m <span class="hljs-string">&quot;Your commit message&quot;</span><br></code></pre></td></tr></table></figure><p>查看提交的历史</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">git <span class="hljs-built_in">log</span> <span class="hljs-comment">--oneline</span><br></code></pre></td></tr></table></figure><h4 id="4-分支操作"><a href="#4-分支操作" class="headerlink" title="4.分支操作"></a>4.分支操作</h4><p>创建一个新的分支</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git branch branch_name</span><br></code></pre></td></tr></table></figure><p>切换到指定分支</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git checkout branch_name</span><br></code></pre></td></tr></table></figure><p>同时创建并切换到新分支</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">git</span> checkout -<span class="hljs-keyword">b</span> new_branch_name<br></code></pre></td></tr></table></figure><p>将指定分支合并到当前分支</p><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cos">git <span class="hljs-keyword">merge</span> branch_name<br></code></pre></td></tr></table></figure><p>删除指定分支</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git branch -d branch_name</span><br></code></pre></td></tr></table></figure><h4 id="5-远程操作"><a href="#5-远程操作" class="headerlink" title="5.远程操作"></a>5.远程操作</h4><p>查看远程仓库</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git remote -v</span><br></code></pre></td></tr></table></figure><p>添加远程仓库</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">git</span> remote <span class="hljs-keyword">add</span> origin https:<span class="hljs-comment">//github.com/user/repo.git</span><br></code></pre></td></tr></table></figure><p>推送分支到远程仓库</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">git <span class="hljs-built_in">push</span> -u <span class="hljs-built_in">origin</span> branch_name<br></code></pre></td></tr></table></figure><p>推送当前分支</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">git <span class="hljs-built_in">push</span><br></code></pre></td></tr></table></figure><p>拉取远程仓库更新</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git pull origin branch_name</span><br></code></pre></td></tr></table></figure><h4 id="6-撤销更改"><a href="#6-撤销更改" class="headerlink" title="6.撤销更改"></a>6.撤销更改</h4><p>恢复工作区中文件的最新提交状态</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">git checkout <span class="hljs-comment">-- filename</span><br></code></pre></td></tr></table></figure><p>重置暂存区的文件与上一次提交的状态一致</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas">git <span class="hljs-keyword">reset</span> HEAD <span class="hljs-keyword">filename</span><br></code></pre></td></tr></table></figure><p>重置当前分支到指定提交</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">git <span class="hljs-keyword">reset</span> <span class="hljs-comment">--hard commit_hash</span><br></code></pre></td></tr></table></figure><h4 id="7-查看差异"><a href="#7-查看差异" class="headerlink" title="7.查看差异"></a>7.查看差异</h4><p>查看工作区和暂存区之间的差异</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git diff</span><br></code></pre></td></tr></table></figure><p>查看暂存区和最后一次提交之间的差异</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">git diff <span class="hljs-comment">--cached</span><br></code></pre></td></tr></table></figure><h4 id="8-从创建到推送的示例"><a href="#8-从创建到推送的示例" class="headerlink" title="8.从创建到推送的示例"></a>8.从创建到推送的示例</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1. 创建新仓库</span><br><span class="hljs-built_in">mkdir</span> myproject<br><span class="hljs-built_in">cd</span> myproject<br>git init<br><br><span class="hljs-comment"># 2. 添加文件并提交</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Hello, Git&quot;</span> &gt; README.md<br>git add README.md<br>git commit -m <span class="hljs-string">&quot;Initial commit&quot;</span><br><br><span class="hljs-comment"># 3. 添加远程仓库</span><br>git remote add origin https://github.com/user/repo.git<br><br><span class="hljs-comment"># 4. 推送到远程仓库</span><br>git push -u origin master<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学海无涯</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
